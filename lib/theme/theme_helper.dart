import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

/// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

/// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner"
      );
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

/// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner"
      );
    }
    //return theme from map

    var colorScheme = _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primaryContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.black900.withOpacity(0.06),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(3.h),
          ),
          shadowColor: appTheme.black900.withOpacity(0.25),
          elevation: 0,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
        backgroundColor: Colors.transparent,
        side: BorderSide(
          color: colorScheme.primary,
          width: 1.h,
        ),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(6.h),
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
        padding: EdgeInsets.zero,
        ),
      ),

      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
      }),
      side: BorderSide(
        width: 1,
      ),
      visualDensity: const VisualDensity(
        vertical: -4,
        horizontal: -4,
      ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.deepOrangeA200.withOpacity(0.33),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
    bodyLarge: TextStyle(
      color: colorScheme.primary,
      fontSize: 19.fSize,
      fontFamily: 'Outfit',
      fontWeight: FontWeight.w400,
    ),
    bodyMedium: TextStyle(
      color: appTheme.black900,
      fontSize: 15.fSize,
      fontFamily: 'Outfit',
      fontWeight: FontWeight.w400,
    ),
    bodySmall: TextStyle(
      color: appTheme.black900.withOpacity(0.65),
      fontSize: 10.fSize,
      fontFamily: 'Outfit',
      fontWeight: FontWeight.w300,
    ),
    headlineSmall: TextStyle(
      color: colorScheme.primary,
      fontSize: 25.fSize,
      fontFamily: 'Outfit',
      fontWeight: FontWeight.w700,
    ),
    labelLarge: TextStyle(
      color: colorScheme.primaryContainer.withOpacity(0.91),
      fontSize: 12.fSize,
      fontFamily: 'Poppins',
      fontWeight: FontWeight.w600,
    ),
    labelMedium: TextStyle(
      color: colorScheme.primaryContainer.withOpacity(1),
      fontSize: 10.fSize,
      fontFamily: 'Outfit',
      fontWeight: FontWeight.w500,
    ),
    labelSmall: TextStyle(
      color: colorScheme.primaryContainer.withOpacity(1),
      fontSize: 9.fSize,
      fontFamily: 'Outfit',
      fontWeight: FontWeight.w500,
    ),
    titleLarge: TextStyle(
      color: colorScheme.primary,
      fontSize: 23.fSize,
      fontFamily: 'Outfit',
      fontWeight: FontWeight.w500,
    ),
    titleMedium: TextStyle(
      color: appTheme.black900,
      fontSize: 16.fSize,
      fontFamily: 'Poppins',
      fontWeight: FontWeight.w500,
    ),
    titleSmall: TextStyle(
      color: colorScheme.onPrimaryContainer.withOpacity(1),
      fontSize: 15.fSize,
      fontFamily: 'Poppins',
      fontWeight: FontWeight.w500,
    ),
  );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFE66137),
    primaryContainer: Color(0XC6FFFFFF),
    secondary: Color(0XC6FFFFFF),
    secondaryContainer: Color(0XA8535050),
    tertiary: Color(0XC6FFFFFF),
    tertiaryContainer: Color(0XA8535050),

    // Background colors
    background: Color(0XC6FFFFFF),

    // Surface colors
    surface: Color(0XC6FFFFFF),
    surfaceTint: Color(0XFF0C101B),
    surfaceVariant: Color(0XA8535050),

    // Error colors
    error: Color(0XFF0C101B),
    errorContainer: Color(0XA8535050),
    onError: Color(0XFF747070),
    onErrorContainer: Color(0X8E370000),

    // On colors(text colors)
    onBackground: Color(0XA8535050),
    onInverseSurface: Color(0XFF747070),
    onPrimary: Color(0XFF0C101B),
    onPrimaryContainer: Color(0XA8535050),
    onSecondary: Color(0XA8535050),
    onSecondaryContainer: Color(0X8E370000),
    onTertiary: Color(0XA8535050),
    onTertiaryContainer: Color(0X8E370000),

    // Other colors
    outline: Color(0XFF0C101B),
    outlineVariant: Color(0XC6FFFFFF),
    scrim: Color(0XC6FFFFFF),
    shadow: Color(0XFF0C101B),

    // Inverse colors
    inversePrimary: Color(0XC6FFFFFF),
    inverseSurface: Color(0XFF0C101B),

    // Pending colors
    onSurface: Color(0XA8535050),
    onSurfaceVariant: Color(0X8E370000),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amberA400 => Color(0XFFFFBD00);

  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray400 => Color(0XFF888888);

  // DeepOrange
  Color get deepOrangeA200 => Color(0XFFE66036);

  // Gray
  Color get gray100 => Color(0XFFF6F6F6);
  Color get gray200 => Color(0XFFF0F0F0);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray500 => Color(0XFFA29696);
  Color get gray900 => Color(0XFF0B0F1A);
  Color get gray90001 => Color(0XFF370001);

  // Indigo
  Color get indigo600 => Color(0XFF3B5998);

  // Red
  Color get red600 => Color(0XFFE63641);
  Color get redA200 => Color(0XFFFF5757);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();















